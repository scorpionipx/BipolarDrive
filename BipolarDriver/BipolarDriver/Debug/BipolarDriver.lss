
BipolarDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000558  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000558  000005ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000a0  008000a0  0000062c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019c8  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4c  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c02  00000000  00000000  00002bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  000037c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060f  00000000  00000000  000039dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a52  00000000  00000000  00003feb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004a3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3a       	cpi	r26, 0xAE	; 174
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 02 	call	0x4c6	; 0x4c6 <main>
  8a:	0c 94 aa 02 	jmp	0x554	; 0x554 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_bipolar_control>:
	
}

void init_bipolar_control(void)
{
	MOTOR_DDR |= (1 << MOTOR_COIL_A_POSITIVE) | (1 << MOTOR_COIL_A_NEGATIVE) | (1 << MOTOR_COIL_B_POSITIVE) | (1 << MOTOR_COIL_B_NEGATIVE);
  92:	87 b3       	in	r24, 0x17	; 23
  94:	8f 60       	ori	r24, 0x0F	; 15
  96:	87 bb       	out	0x17, r24	; 23
	MOTOR_PORT &= ~((1 << MOTOR_COIL_A_POSITIVE) | (1 << MOTOR_COIL_A_NEGATIVE) | (1 << MOTOR_COIL_B_POSITIVE) | (1 << MOTOR_COIL_B_NEGATIVE));
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	80 7f       	andi	r24, 0xF0	; 240
  9c:	88 bb       	out	0x18, r24	; 24
  9e:	08 95       	ret

000000a0 <bipolar_wave_drive_forward_one_step>:
	_delay_ms(2);
}

void bipolar_wave_drive_forward_one_step()
{
	switch(LAST_STEP)
  a0:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <LAST_STEP>
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	89 f0       	breq	.+34     	; 0xca <bipolar_wave_drive_forward_one_step+0x2a>
  a8:	18 f4       	brcc	.+6      	; 0xb0 <bipolar_wave_drive_forward_one_step+0x10>
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	31 f0       	breq	.+12     	; 0xba <bipolar_wave_drive_forward_one_step+0x1a>
  ae:	25 c0       	rjmp	.+74     	; 0xfa <bipolar_wave_drive_forward_one_step+0x5a>
  b0:	83 30       	cpi	r24, 0x03	; 3
  b2:	99 f0       	breq	.+38     	; 0xda <bipolar_wave_drive_forward_one_step+0x3a>
  b4:	84 30       	cpi	r24, 0x04	; 4
  b6:	c9 f0       	breq	.+50     	; 0xea <bipolar_wave_drive_forward_one_step+0x4a>
  b8:	20 c0       	rjmp	.+64     	; 0xfa <bipolar_wave_drive_forward_one_step+0x5a>
	{
		case BIPOLAR_STEP_1:
		{
			MOTOR_STEP_2;
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	84 7f       	andi	r24, 0xF4	; 244
  be:	88 bb       	out	0x18, r24	; 24
  c0:	c2 9a       	sbi	0x18, 2	; 24
			LAST_STEP = BIPOLAR_STEP_2;
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <LAST_STEP>
			break;
  c8:	08 95       	ret
		}
		case BIPOLAR_STEP_2:
		{
			MOTOR_STEP_3;
  ca:	88 b3       	in	r24, 0x18	; 24
  cc:	82 7f       	andi	r24, 0xF2	; 242
  ce:	88 bb       	out	0x18, r24	; 24
  d0:	c1 9a       	sbi	0x18, 1	; 24
			LAST_STEP = BIPOLAR_STEP_3;
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <LAST_STEP>
			break;
  d8:	08 95       	ret
		}
		case BIPOLAR_STEP_3:
		{
			MOTOR_STEP_4;
  da:	88 b3       	in	r24, 0x18	; 24
  dc:	88 7f       	andi	r24, 0xF8	; 248
  de:	88 bb       	out	0x18, r24	; 24
  e0:	c3 9a       	sbi	0x18, 3	; 24
			LAST_STEP = BIPOLAR_STEP_4;
  e2:	84 e0       	ldi	r24, 0x04	; 4
  e4:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <LAST_STEP>
			break;
  e8:	08 95       	ret
		}
		case BIPOLAR_STEP_4:
		{
			MOTOR_STEP_1;
  ea:	88 b3       	in	r24, 0x18	; 24
  ec:	81 7f       	andi	r24, 0xF1	; 241
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	c0 9a       	sbi	0x18, 0	; 24
			LAST_STEP = BIPOLAR_STEP_1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <LAST_STEP>
			break;
  f8:	08 95       	ret
		}
		default:
		{
			LAST_STEP = BIPOLAR_STEP_1;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <LAST_STEP>
 100:	08 95       	ret

00000102 <bipolar_wave_drive_backward_one_step>:
	}
}

void bipolar_wave_drive_backward_one_step()
{
	switch(LAST_STEP)
 102:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <LAST_STEP>
 106:	82 30       	cpi	r24, 0x02	; 2
 108:	89 f0       	breq	.+34     	; 0x12c <bipolar_wave_drive_backward_one_step+0x2a>
 10a:	18 f4       	brcc	.+6      	; 0x112 <bipolar_wave_drive_backward_one_step+0x10>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	31 f0       	breq	.+12     	; 0x11c <bipolar_wave_drive_backward_one_step+0x1a>
 110:	25 c0       	rjmp	.+74     	; 0x15c <bipolar_wave_drive_backward_one_step+0x5a>
 112:	83 30       	cpi	r24, 0x03	; 3
 114:	99 f0       	breq	.+38     	; 0x13c <bipolar_wave_drive_backward_one_step+0x3a>
 116:	84 30       	cpi	r24, 0x04	; 4
 118:	c9 f0       	breq	.+50     	; 0x14c <bipolar_wave_drive_backward_one_step+0x4a>
 11a:	20 c0       	rjmp	.+64     	; 0x15c <bipolar_wave_drive_backward_one_step+0x5a>
	{
		case BIPOLAR_STEP_1:
		{
			MOTOR_STEP_4;
 11c:	88 b3       	in	r24, 0x18	; 24
 11e:	88 7f       	andi	r24, 0xF8	; 248
 120:	88 bb       	out	0x18, r24	; 24
 122:	c3 9a       	sbi	0x18, 3	; 24
			LAST_STEP = BIPOLAR_STEP_4;
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <LAST_STEP>
			break;
 12a:	08 95       	ret
		}
		case BIPOLAR_STEP_2:
		{
			MOTOR_STEP_1;
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	81 7f       	andi	r24, 0xF1	; 241
 130:	88 bb       	out	0x18, r24	; 24
 132:	c0 9a       	sbi	0x18, 0	; 24
			LAST_STEP = BIPOLAR_STEP_1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <LAST_STEP>
			break;
 13a:	08 95       	ret
		}
		case BIPOLAR_STEP_3:
		{
			MOTOR_STEP_2;
 13c:	88 b3       	in	r24, 0x18	; 24
 13e:	84 7f       	andi	r24, 0xF4	; 244
 140:	88 bb       	out	0x18, r24	; 24
 142:	c2 9a       	sbi	0x18, 2	; 24
			LAST_STEP = BIPOLAR_STEP_2;
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <LAST_STEP>
			break;
 14a:	08 95       	ret
		}
		case BIPOLAR_STEP_4:
		{
			MOTOR_STEP_3;
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	82 7f       	andi	r24, 0xF2	; 242
 150:	88 bb       	out	0x18, r24	; 24
 152:	c1 9a       	sbi	0x18, 1	; 24
			LAST_STEP = BIPOLAR_STEP_3;
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <LAST_STEP>
			break;
 15a:	08 95       	ret
		}
		default:
		{
			LAST_STEP = BIPOLAR_STEP_1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <LAST_STEP>
 162:	08 95       	ret

00000164 <spin_to_angle>:
}


void spin_to_angle()
{
	if((abs(ANGLE - DESIRED_ANGLE) > (STEP_DEGREES / 2)) && (ANGLE < DESIRED_ANGLE))
 164:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <ANGLE>
 168:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <ANGLE+0x1>
 16c:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <DESIRED_ANGLE>
 170:	30 91 aa 00 	lds	r19, 0x00AA	; 0x8000aa <DESIRED_ANGLE+0x1>
 174:	bc 01       	movw	r22, r24
 176:	62 1b       	sub	r22, r18
 178:	73 0b       	sbc	r23, r19
 17a:	ab 01       	movw	r20, r22
 17c:	22 f4       	brpl	.+8      	; 0x186 <spin_to_angle+0x22>
 17e:	44 27       	eor	r20, r20
 180:	55 27       	eor	r21, r21
 182:	46 1b       	sub	r20, r22
 184:	57 0b       	sbc	r21, r23
 186:	4a 30       	cpi	r20, 0x0A	; 10
 188:	51 05       	cpc	r21, r1
 18a:	64 f1       	brlt	.+88     	; 0x1e4 <spin_to_angle+0x80>
 18c:	82 17       	cp	r24, r18
 18e:	93 07       	cpc	r25, r19
 190:	d8 f4       	brcc	.+54     	; 0x1c8 <spin_to_angle+0x64>
	{
		bipolar_wave_drive_forward_one_step();
 192:	0e 94 50 00 	call	0xa0	; 0xa0 <bipolar_wave_drive_forward_one_step>
		ANGLE += STEP_DEGREES;
 196:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <ANGLE>
 19a:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <ANGLE+0x1>
 19e:	42 96       	adiw	r24, 0x12	; 18
 1a0:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <ANGLE+0x1>
 1a4:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <ANGLE>
	}
	if((abs(ANGLE - DESIRED_ANGLE) > (STEP_DEGREES / 2)) && (ANGLE > DESIRED_ANGLE))
 1a8:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <DESIRED_ANGLE>
 1ac:	30 91 aa 00 	lds	r19, 0x00AA	; 0x8000aa <DESIRED_ANGLE+0x1>
 1b0:	bc 01       	movw	r22, r24
 1b2:	62 1b       	sub	r22, r18
 1b4:	73 0b       	sbc	r23, r19
 1b6:	ab 01       	movw	r20, r22
 1b8:	22 f4       	brpl	.+8      	; 0x1c2 <spin_to_angle+0x5e>
 1ba:	44 27       	eor	r20, r20
 1bc:	55 27       	eor	r21, r21
 1be:	46 1b       	sub	r20, r22
 1c0:	57 0b       	sbc	r21, r23
 1c2:	4a 30       	cpi	r20, 0x0A	; 10
 1c4:	51 05       	cpc	r21, r1
 1c6:	74 f0       	brlt	.+28     	; 0x1e4 <spin_to_angle+0x80>
 1c8:	28 17       	cp	r18, r24
 1ca:	39 07       	cpc	r19, r25
 1cc:	58 f4       	brcc	.+22     	; 0x1e4 <spin_to_angle+0x80>
	{
		bipolar_wave_drive_backward_one_step();
 1ce:	0e 94 81 00 	call	0x102	; 0x102 <bipolar_wave_drive_backward_one_step>
		ANGLE -= STEP_DEGREES;
 1d2:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <ANGLE>
 1d6:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <ANGLE+0x1>
 1da:	42 97       	sbiw	r24, 0x12	; 18
 1dc:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <ANGLE+0x1>
 1e0:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <ANGLE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	8f e3       	ldi	r24, 0x3F	; 63
 1e6:	9f e1       	ldi	r25, 0x1F	; 31
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <spin_to_angle+0x84>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <spin_to_angle+0x8a>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <init_interrupt_200ms>:

// 200 ms timer
void init_interrupt_200ms()
{
	// set up timer with prescaler = 64 and CTC mode
	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
 1f2:	8e b5       	in	r24, 0x2e	; 46
 1f4:	8b 60       	ori	r24, 0x0B	; 11
 1f6:	8e bd       	out	0x2e, r24	; 46
	
	// initialize counter
	TCNT1 = 0;
 1f8:	1d bc       	out	0x2d, r1	; 45
 1fa:	1c bc       	out	0x2c, r1	; 44
	
	// initialize compare value
	OCR1A = 49999;
 1fc:	8f e4       	ldi	r24, 0x4F	; 79
 1fe:	93 ec       	ldi	r25, 0xC3	; 195
 200:	9b bd       	out	0x2b, r25	; 43
 202:	8a bd       	out	0x2a, r24	; 42
	
	// enable compare interrupt
	TIMSK |= (1 << OCIE1A);
 204:	89 b7       	in	r24, 0x39	; 57
 206:	80 61       	ori	r24, 0x10	; 16
 208:	89 bf       	out	0x39, r24	; 57
 20a:	08 95       	ret

0000020c <__vector_7>:

volatile int xcounter = 1;

// 200ms ISR
ISR (TIMER1_COMPA_vect)
{
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
	put_Char_LCD_Display((DESIRED_ANGLE/10)%10 + 48, 1);
	put_Char_LCD_Display('.', 1);
	put_Char_LCD_Display(DESIRED_ANGLE%10 + 48, 1);
	
	put_Char_LCD_Display(' ', 1);*/
	if((abs(ANGLE - DESIRED_ANGLE)) > (STEP_DEGREES / 2))
 21e:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <ANGLE>
 222:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <ANGLE+0x1>
 226:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <DESIRED_ANGLE>
 22a:	30 91 aa 00 	lds	r19, 0x00AA	; 0x8000aa <DESIRED_ANGLE+0x1>
 22e:	82 1b       	sub	r24, r18
 230:	93 0b       	sbc	r25, r19
 232:	9c 01       	movw	r18, r24
 234:	22 f4       	brpl	.+8      	; 0x23e <__vector_7+0x32>
 236:	22 27       	eor	r18, r18
 238:	33 27       	eor	r19, r19
 23a:	28 1b       	sub	r18, r24
 23c:	39 0b       	sbc	r19, r25
 23e:	2a 30       	cpi	r18, 0x0A	; 10
 240:	31 05       	cpc	r19, r1
 242:	1c f4       	brge	.+6      	; 0x24a <__vector_7+0x3e>
		//put_Char_LCD_Display('Y', 1);
	}
	else
	{
		//put_Char_LCD_Display('N', 1);
		MOTOR_OFF;
 244:	88 b3       	in	r24, 0x18	; 24
 246:	80 7f       	andi	r24, 0xF0	; 240
 248:	88 bb       	out	0x18, r24	; 24
	}
	
	/*put_Char_LCD_Display((abs(ANGLE - DESIRED_ANGLE)/1000)%10 + 48, 1);
	put_Char_LCD_Display((abs(ANGLE - DESIRED_ANGLE)/100)%10 + 48, 1);
	put_Char_LCD_Display((abs(ANGLE - DESIRED_ANGLE)/10)%10 + 48, 1);*/
}
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	3f 91       	pop	r19
 250:	2f 91       	pop	r18
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <put_Char_LCD_Display>:
void display_initializing_message()
{
	put_Char_LCD_Display(0x01,0);
	
	put_Char_LCD_Display(0x80, 0);
	put_string("Initializing...");
 25c:	25 b3       	in	r18, 0x15	; 21
 25e:	2f 70       	andi	r18, 0x0F	; 15
 260:	38 2f       	mov	r19, r24
 262:	30 7f       	andi	r19, 0xF0	; 240
 264:	23 2b       	or	r18, r19
 266:	25 bb       	out	0x15, r18	; 21
 268:	25 b3       	in	r18, 0x15	; 21
 26a:	61 70       	andi	r22, 0x01	; 1
 26c:	2e 7f       	andi	r18, 0xFE	; 254
 26e:	26 2b       	or	r18, r22
 270:	25 bb       	out	0x15, r18	; 21
 272:	a9 9a       	sbi	0x15, 1	; 21
 274:	ef ed       	ldi	r30, 0xDF	; 223
 276:	fe e2       	ldi	r31, 0x2E	; 46
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <put_Char_LCD_Display+0x1c>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <put_Char_LCD_Display+0x22>
 27e:	00 00       	nop
 280:	25 b3       	in	r18, 0x15	; 21
 282:	2c 7f       	andi	r18, 0xFC	; 252
 284:	25 bb       	out	0x15, r18	; 21
 286:	25 b3       	in	r18, 0x15	; 21
 288:	2f 70       	andi	r18, 0x0F	; 15
 28a:	82 95       	swap	r24
 28c:	92 95       	swap	r25
 28e:	90 7f       	andi	r25, 0xF0	; 240
 290:	98 27       	eor	r25, r24
 292:	80 7f       	andi	r24, 0xF0	; 240
 294:	98 27       	eor	r25, r24
 296:	82 2b       	or	r24, r18
 298:	85 bb       	out	0x15, r24	; 21
 29a:	85 b3       	in	r24, 0x15	; 21
 29c:	8e 7f       	andi	r24, 0xFE	; 254
 29e:	68 2b       	or	r22, r24
 2a0:	65 bb       	out	0x15, r22	; 21
 2a2:	a9 9a       	sbi	0x15, 1	; 21
 2a4:	8f ed       	ldi	r24, 0xDF	; 223
 2a6:	9e e2       	ldi	r25, 0x2E	; 46
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <put_Char_LCD_Display+0x4c>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <put_Char_LCD_Display+0x52>
 2ae:	00 00       	nop
 2b0:	85 b3       	in	r24, 0x15	; 21
 2b2:	8c 7f       	andi	r24, 0xFC	; 252
 2b4:	85 bb       	out	0x15, r24	; 21
 2b6:	08 95       	ret

000002b8 <init_LCD_Display>:
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	84 bb       	out	0x14, r24	; 20
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 2e 01 	call	0x25c	; 0x25c <put_Char_LCD_Display>
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	9c e7       	ldi	r25, 0x7C	; 124
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <init_LCD_Display+0x14>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <init_LCD_Display+0x1a>
 2d2:	00 00       	nop
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 2e 01 	call	0x25c	; 0x25c <put_Char_LCD_Display>
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	9c e7       	ldi	r25, 0x7C	; 124
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <init_LCD_Display+0x2c>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <init_LCD_Display+0x32>
 2ea:	00 00       	nop
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	83 e0       	ldi	r24, 0x03	; 3
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 2e 01 	call	0x25c	; 0x25c <put_Char_LCD_Display>
 2f8:	8f ef       	ldi	r24, 0xFF	; 255
 2fa:	9c e7       	ldi	r25, 0x7C	; 124
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <init_LCD_Display+0x44>
 300:	00 c0       	rjmp	.+0      	; 0x302 <init_LCD_Display+0x4a>
 302:	00 00       	nop
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 2e 01 	call	0x25c	; 0x25c <put_Char_LCD_Display>
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	9c e7       	ldi	r25, 0x7C	; 124
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <init_LCD_Display+0x5c>
 318:	00 c0       	rjmp	.+0      	; 0x31a <init_LCD_Display+0x62>
 31a:	00 00       	nop
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	8c e0       	ldi	r24, 0x0C	; 12
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 2e 01 	call	0x25c	; 0x25c <put_Char_LCD_Display>
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	9c e7       	ldi	r25, 0x7C	; 124
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <init_LCD_Display+0x74>
 330:	00 c0       	rjmp	.+0      	; 0x332 <init_LCD_Display+0x7a>
 332:	00 00       	nop
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 2e 01 	call	0x25c	; 0x25c <put_Char_LCD_Display>
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	9c e7       	ldi	r25, 0x7C	; 124
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <init_LCD_Display+0x8c>
 348:	00 c0       	rjmp	.+0      	; 0x34a <init_LCD_Display+0x92>
 34a:	00 00       	nop
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	80 e8       	ldi	r24, 0x80	; 128
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 2e 01 	call	0x25c	; 0x25c <put_Char_LCD_Display>
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	9c e7       	ldi	r25, 0x7C	; 124
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <init_LCD_Display+0xa4>
 360:	00 c0       	rjmp	.+0      	; 0x362 <init_LCD_Display+0xaa>
 362:	00 00       	nop
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 2e 01 	call	0x25c	; 0x25c <put_Char_LCD_Display>
 370:	08 95       	ret

00000372 <put_string>:
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	8c 01       	movw	r16, r24
 380:	7c 01       	movw	r14, r24
 382:	c0 e0       	ldi	r28, 0x00	; 0
 384:	d0 e0       	ldi	r29, 0x00	; 0
 386:	09 c0       	rjmp	.+18     	; 0x39a <put_string+0x28>
 388:	f7 01       	movw	r30, r14
 38a:	81 91       	ld	r24, Z+
 38c:	7f 01       	movw	r14, r30
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 2e 01 	call	0x25c	; 0x25c <put_Char_LCD_Display>
 398:	21 96       	adiw	r28, 0x01	; 1
 39a:	f8 01       	movw	r30, r16
 39c:	01 90       	ld	r0, Z+
 39e:	00 20       	and	r0, r0
 3a0:	e9 f7       	brne	.-6      	; 0x39c <put_string+0x2a>
 3a2:	31 97       	sbiw	r30, 0x01	; 1
 3a4:	e0 1b       	sub	r30, r16
 3a6:	f1 0b       	sbc	r31, r17
 3a8:	ce 17       	cp	r28, r30
 3aa:	df 07       	cpc	r29, r31
 3ac:	68 f3       	brcs	.-38     	; 0x388 <put_string+0x16>
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	ff 90       	pop	r15
 3b8:	ef 90       	pop	r14
 3ba:	08 95       	ret

000003bc <display_application_title>:
}

void display_application_title()
{
	put_Char_LCD_Display(0x01, 0);
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 2e 01 	call	0x25c	; 0x25c <put_Char_LCD_Display>
	put_Char_LCD_Display(0x80, 0);
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	80 e8       	ldi	r24, 0x80	; 128
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 2e 01 	call	0x25c	; 0x25c <put_Char_LCD_Display>
	put_string("BIPOLAR DRIVER");
 3d4:	80 e7       	ldi	r24, 0x70	; 112
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 b9 01 	call	0x372	; 0x372 <put_string>
	put_Char_LCD_Display(0xC0, 0);
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	80 ec       	ldi	r24, 0xC0	; 192
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 2e 01 	call	0x25c	; 0x25c <put_Char_LCD_Display>
	put_string("   SCORPIONIPX");
 3e8:	8f e7       	ldi	r24, 0x7F	; 127
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 b9 01 	call	0x372	; 0x372 <put_string>
 3f0:	08 95       	ret

000003f2 <init_UART>:
unsigned char command_id = 0;
uint16 received_data;

void init_UART(void)
{
	UCSRB = (1 << RXEN) | (1 << TXEN);   // Turn on the transmission and reception circuitry
 3f2:	88 e1       	ldi	r24, 0x18	; 24
 3f4:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Use 8-bit character sizes
 3f6:	86 e8       	ldi	r24, 0x86	; 134
 3f8:	80 bd       	out	0x20, r24	; 32

	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
 3fa:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 3fc:	87 e6       	ldi	r24, 0x67	; 103
 3fe:	89 b9       	out	0x09, r24	; 9

	UCSRB |= (1 << RXCIE); // Enable the USART Recieve Complete interrupt (USART_RXC)
 400:	57 9a       	sbi	0x0a, 7	; 10
 402:	08 95       	ret

00000404 <uart_command>:
	//UDR = received_command; // Echo back the received byte back to the computer
}

void uart_command(unsigned char _command)
{
	switch(receiving_state)
 404:	20 91 a1 00 	lds	r18, 0x00A1	; 0x8000a1 <receiving_state>
 408:	30 91 a2 00 	lds	r19, 0x00A2	; 0x8000a2 <receiving_state+0x1>
 40c:	21 30       	cpi	r18, 0x01	; 1
 40e:	31 05       	cpc	r19, r1
 410:	99 f0       	breq	.+38     	; 0x438 <uart_command+0x34>
 412:	28 f0       	brcs	.+10     	; 0x41e <uart_command+0x1a>
 414:	22 30       	cpi	r18, 0x02	; 2
 416:	31 05       	cpc	r19, r1
 418:	d9 f0       	breq	.+54     	; 0x450 <uart_command+0x4c>
	{
		default:
		{
			UDR = _command;
 41a:	8c b9       	out	0x0c, r24	; 12
			break;
 41c:	08 95       	ret
		}
		case RECEIVING_STATE_ID:
		{
			receiving_state = RECEIVING_STATE_DATA_1;
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	30 93 a2 00 	sts	0x00A2, r19	; 0x8000a2 <receiving_state+0x1>
 426:	20 93 a1 00 	sts	0x00A1, r18	; 0x8000a1 <receiving_state>
			
			command_id = _command;
 42a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			received_data = 0;
 42e:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <received_data+0x1>
 432:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <received_data>
			
			break;
 436:	08 95       	ret
		}
		case RECEIVING_STATE_DATA_1:
		{
			receiving_state = RECEIVING_STATE_DATA_2;
 438:	22 e0       	ldi	r18, 0x02	; 2
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	30 93 a2 00 	sts	0x00A2, r19	; 0x8000a2 <receiving_state+0x1>
 440:	20 93 a1 00 	sts	0x00A1, r18	; 0x8000a1 <receiving_state>
			
			received_data = _command;
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <received_data+0x1>
 44a:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <received_data>
			
			break;
 44e:	08 95       	ret
		}
		case RECEIVING_STATE_DATA_2:
		{
			receiving_state = RECEIVING_STATE_ID;
 450:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <receiving_state+0x1>
 454:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <receiving_state>
			
			received_data <<= 8;
			received_data |= _command;
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <received_data>
 460:	28 2b       	or	r18, r24
 462:	30 93 ac 00 	sts	0x00AC, r19	; 0x8000ac <received_data+0x1>
 466:	20 93 ab 00 	sts	0x00AB, r18	; 0x8000ab <received_data>
			
			DESIRED_ANGLE = received_data;
 46a:	30 93 aa 00 	sts	0x00AA, r19	; 0x8000aa <DESIRED_ANGLE+0x1>
 46e:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <DESIRED_ANGLE>
 472:	08 95       	ret

00000474 <__vector_13>:

	UCSRB |= (1 << RXCIE); // Enable the USART Recieve Complete interrupt (USART_RXC)
}

ISR(USART_RXC_vect)
{
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	2f 93       	push	r18
 480:	3f 93       	push	r19
 482:	4f 93       	push	r20
 484:	5f 93       	push	r21
 486:	6f 93       	push	r22
 488:	7f 93       	push	r23
 48a:	8f 93       	push	r24
 48c:	9f 93       	push	r25
 48e:	af 93       	push	r26
 490:	bf 93       	push	r27
 492:	ef 93       	push	r30
 494:	ff 93       	push	r31
	received_command = UDR; // Fetch the received byte value into the variable "ByteReceived"
 496:	8c b1       	in	r24, 0x0c	; 12
 498:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <received_command>
	
	uart_command(received_command);
 49c:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <received_command>
 4a0:	0e 94 02 02 	call	0x404	; 0x404 <uart_command>
	
	//UDR = received_command; // Echo back the received byte back to the computer
}
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	bf 91       	pop	r27
 4aa:	af 91       	pop	r26
 4ac:	9f 91       	pop	r25
 4ae:	8f 91       	pop	r24
 4b0:	7f 91       	pop	r23
 4b2:	6f 91       	pop	r22
 4b4:	5f 91       	pop	r21
 4b6:	4f 91       	pop	r20
 4b8:	3f 91       	pop	r19
 4ba:	2f 91       	pop	r18
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <main>:
#include "IPX_BipolarDriver.h"
#include "IPX_UART.h"

int main(void)
{
	ANGLE = 0;
 4c6:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <ANGLE+0x1>
 4ca:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <ANGLE>
	ROTATIONS = 0;
 4ce:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <ROTATIONS+0x1>
 4d2:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <ROTATIONS>
	LAST_STEP = BIPOLAR_STEP_NULL;
 4d6:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <LAST_STEP>
	DESIRED_ANGLE = 0;
 4da:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <DESIRED_ANGLE+0x1>
 4de:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <DESIRED_ANGLE>
	
	init_UART();
 4e2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <init_UART>
	init_LCD_Display();
 4e6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <init_LCD_Display>
	init_interrupt_200ms();
 4ea:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <init_interrupt_200ms>
	init_bipolar_control();
 4ee:	0e 94 49 00 	call	0x92	; 0x92 <init_bipolar_control>
 4f2:	2f ef       	ldi	r18, 0xFF	; 255
 4f4:	80 e7       	ldi	r24, 0x70	; 112
 4f6:	92 e0       	ldi	r25, 0x02	; 2
 4f8:	21 50       	subi	r18, 0x01	; 1
 4fa:	80 40       	sbci	r24, 0x00	; 0
 4fc:	90 40       	sbci	r25, 0x00	; 0
 4fe:	e1 f7       	brne	.-8      	; 0x4f8 <main+0x32>
 500:	00 c0       	rjmp	.+0      	; 0x502 <main+0x3c>
 502:	00 00       	nop
	
	_delay_ms(50);
	
	display_application_title();
 504:	0e 94 de 01 	call	0x3bc	; 0x3bc <display_application_title>
 508:	2f ef       	ldi	r18, 0xFF	; 255
 50a:	83 ed       	ldi	r24, 0xD3	; 211
 50c:	90 e3       	ldi	r25, 0x30	; 48
 50e:	21 50       	subi	r18, 0x01	; 1
 510:	80 40       	sbci	r24, 0x00	; 0
 512:	90 40       	sbci	r25, 0x00	; 0
 514:	e1 f7       	brne	.-8      	; 0x50e <main+0x48>
 516:	00 c0       	rjmp	.+0      	; 0x518 <main+0x52>
 518:	00 00       	nop
	_delay_ms(1000);
	
	put_Char_LCD_Display(0x01, 0);
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 2e 01 	call	0x25c	; 0x25c <put_Char_LCD_Display>
	put_Char_LCD_Display(0x80, 0);
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	80 e8       	ldi	r24, 0x80	; 128
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 2e 01 	call	0x25c	; 0x25c <put_Char_LCD_Display>
	put_string("ANGLE TARGET DIF");
 532:	8e e8       	ldi	r24, 0x8E	; 142
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 b9 01 	call	0x372	; 0x372 <put_string>
 53a:	2f ef       	ldi	r18, 0xFF	; 255
 53c:	8d e3       	ldi	r24, 0x3D	; 61
 53e:	99 e4       	ldi	r25, 0x49	; 73
 540:	21 50       	subi	r18, 0x01	; 1
 542:	80 40       	sbci	r24, 0x00	; 0
 544:	90 40       	sbci	r25, 0x00	; 0
 546:	e1 f7       	brne	.-8      	; 0x540 <main+0x7a>
 548:	00 c0       	rjmp	.+0      	; 0x54a <main+0x84>
 54a:	00 00       	nop
	_delay_ms(1500);
	sei();
 54c:	78 94       	sei
		
		//bipolar_forward_half_step_drive_forward();
		//_delay_ms(500);
		//if((abs(ANGLE - DESIRED_ANGLE)) >= (STEP_DEGREES))
		{
			spin_to_angle();
 54e:	0e 94 b2 00 	call	0x164	; 0x164 <spin_to_angle>
 552:	fd cf       	rjmp	.-6      	; 0x54e <main+0x88>

00000554 <_exit>:
 554:	f8 94       	cli

00000556 <__stop_program>:
 556:	ff cf       	rjmp	.-2      	; 0x556 <__stop_program>
